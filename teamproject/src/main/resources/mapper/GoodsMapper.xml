<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="kr.or.ksmart.mapper.GoodsMapper">

	<resultMap type="Goods" id="goodsResultMap">
		<result property="goodsCode" column="goods_code"/>
		<result property="goodsCategoryCode" column="goods_category_code"/>
		<result property="goodsName" column="goods_name"/>
		<result property="goodsBarcode" column="goods_barcode"/>
		<result property="stockCount" column="stock_count"/>
		<result property="goodsInputDate" column="goods_input_date"/>
		<result property="goodsDesc" column="goods_desc"/>
		
		<result property="originImgName" column="origin_Img_name"/>
		<result property="convertImgName" column="convert_Img_name"/>
		
		<result property="goodsCategoryName" column="goods_category_name"/>
	</resultMap>
	
	<insert id="insertGoods" parameterType="Goods">
			INSERT INTO goods
				(	goods_code
				, goods_category_code
				, goods_name
				, goods_barcode
				, stock_count
				, goods_input_date
				, goods_desc
				, origin_img_name
				, convert_img_name	)
			VALUES 
				( #{goodsCode}
				, #{goodsCategoryCode}
				, #{goodsName}
				, #{goodsBarcode}
				, 0
				, NOW()
				, #{goodsDesc}
				, #{originImgName}
				, #{convertImgName}	);
	</insert>
	
	<select id="getNextGoodsCode" resultType="String">
		SELECT
				CASE
				WHEN MAX(goods_code) LIKE 'goo_%'
					THEN
						CONCAT
							( 'goo_'
							, LPAD(MAX(CAST(SUBSTRING(goods_code, 5) AS DECIMAL))+1,'4','0') )
				ELSE
					ifnull(goods_code, 'goo_0001')
				END AS goodsCode
			FROM
				goods;
	</select>
		
	<select id="getGoodsList" resultMap="goodsResultMap">
		SELECT
				goods_code
			, g.goods_category_code
			, goods_name
			, goods_barcode
			, stock_count
			, goods_input_date
			, goods_desc
			, origin_img_name
			, convert_img_name
			, c.goods_category_name
		FROM
			goods as g
		INNER JOIN goods_category AS c
			ON g.goods_category_code = c.goods_category_code
		ORDER BY
			goods_code DESC;
	</select>
	
	<select id="getGoods" parameterType="String" resultMap="goodsResultMap">
		SELECT
				goods_code
			, g.goods_category_code
			, goods_name
			, goods_barcode
			, stock_count
			, goods_input_date
			, goods_desc
			, origin_img_name
			, convert_img_name
			, c.goods_category_name
		FROM
			goods as g
		INNER JOIN goods_category AS c
			ON g.goods_category_code = c.goods_category_code
		WHERE
			goods_code = #{goodsCode};
	</select>
	
	<select id="getGoodsCountByGoodsCategory" resultMap="goodsResultMap">
		SELECT
			goods_category_code,
			COUNT(1)as goodsCountByGoodsCategory
		FROM goods
		GROUP BY goods_category_code
	</select>
	
	<update id="updateGoods" parameterType="Goods">
		UPDATE goods
		<trim prefix="SET" suffixOverrides=",">
			<if test="goodsCategoryCode neq null and goodsCategoryCode neq ''.toString()">
				goods_category_code=	#{goodsCategoryCode},
			</if>
				goods_name=						#{goodsName},
				goods_barcode=				#{goodsBarcode},
				goods_input_date=			NOW(),
				goods_desc=						#{goodsDesc},
			<if test="originImgName neq null and originImgName neq ''.toString()">
				origin_img_name=			#{originImgName},
			</if>
			<if test="convertImgName neq null and convertImgName neq ''.toString()">
				convert_img_name=			#{convertImgName}
			</if>
		</trim>
			WHERE
				goods_code= #{goodsCode};
	</update>
	
	<delete id="deleteGoods" parameterType="String">
		DELETE FROM
				goods
		WHERE
				goods_code= #{goodsCode};
	</delete>
	
	<select id="checkBarcodeOverlap" parameterType="String">
		SELECT 
				goods_code
		FROM
			goods as g
			INNER JOIN goods_category AS c
						ON	g.goods_category_code = c.goods_category_code
			WHERE
				goods_barcode = #{goodsBarcode};
	</select>
	
</mapper>