<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="kr.or.ksmart.mapper.AsRepairMapper">
		<resultMap type="kr.or.ksmart.domain.AsRepair" id="AsRepairResultMap">
		<result property="repairCode" column="repair_code"/>
		<result property="repairType" column="repair_type"/>
		<result property="repairCost" column="repair_cost"/>
		<result property="billingDate" column="billing_date"/>
		<result property="repairCompletionDate" column="repair_completion_date"/>
		<result property="repairContents" column="repair_contents"/>
		<result property="contractCode" column="contract_code"/>
		<result property="contractNo" column="contract_no"/>
		<result property="rentalFromDate" column="rental_from_date"/>
		<result property="rentalToDate" column="rental_to_date"/>
		<result property="goodsCode" column="goods_code"/>
		<result property="goodsName" column="goods_name"/>
		<result property="requestReason" column="request_reason"/>
		<result property="visitDate" column="visit_date"/>
		<result property="visitExpectedDate" column="visit_expected_date"/>
		<result property="staffId" column="staff_id"/>
		<result property="staffId2" column="staff_id2"/>
		<result property="exchangeDate" column="exchange_date"/>
		<result property="workingSituation" column="working_situation"/>		
		<result property="work" column="work"/>
		<result property="customerId" column="customer_id"/>
		<result property="customerName" column="customer_name"/>
		<result property="customerCall" column="customer_call"/>
		<result property="zipCode" column="zip_code"/>
		<result property="customerAddress" column="customer_address"/>
		<result property="customerAddress2" column="customer_address2"/>
		<result property="branchCode" column="branch_code"/>
		<result property="branchName" column="branch_name"/>
		<result property="staffName" column="staff_name"/>
		<result property="receptionDate" column="reception_date"/>
	</resultMap>
	
	
	
	

	
	
	
	<!--수리현황 상세보기  -->
	<select id="SelectForUpdate" parameterType="String" resultMap="AsRepairResultMap">
	SELECT
		 RE.repair_code
		,DC.contract_code
		,DC.contract_no
		,C.customer_id
		,C.customer_name
		,C.customer_call
		,C.zip_code
		,C.customer_address
		,C.customer_address2
		,G.goods_code
		,G.goods_name
		,DC.rental_from_date
		,DC.rental_to_date
		,AR.reception_date
		,AR.staff_id
		,AR.visit_expected_date
		,RE.visit_date
		,S.staff_name
		,RE.repair_type
		,RE.repair_contents
		,RE.repair_completion_date
	from
		as_repair AS RE
	JOIN
		as_reception AS AR
	ON
		AR.reception_code = RE.reception_code
	JOIN
		doc_contract AS DC
	ON
		DC.contract_code = AR.contract_code
	JOIN
		customer AS C
	ON
		DC.customer_id = C.customer_id
	JOIN
		goods AS G
	ON
		G.goods_code = AR.goods_code
	JOIN
		staff AS S
	ON
		S.staff_code = AR.staff_id2
	GROUP BY 
		DC.contract_code
			
	</select> 
	
	
	<!--수리현황 업데이트  -->
	<update id="rUpdate" parameterType="kr.or.ksmart.domain.AsRepair">
		update
		    as_reception AS AR, as_repair AS RE
		SET
		   AR.working_situation=#{workingSituation},
		   RE.working_situation=#{workingSituation},
		   RE.visit_date=#{visitDate},
		   RE.repair_completion_date=#{repairCompletionDate},
		   RE.staff_id2=#{staffId2}							
		where
		     AR.reception_code = RE.reception_code;
			     
	</update>
	
	
	<!--삭제  -->
	<delete id="rDelete" parameterType="String">
		DELETE FROM as_reception WHERE reception_code=#{receptionCode};
	</delete> 
	
	<!--검색 리스트 페이징  -->
 	<!-- <select id="findTotalCount" resultType="int"> 
 	SELECT 
		COUNT(*) 
      FROM 
      ( SELECT 
			 AR.reception_code     AS receptionCode
			,AR.`work`             AS work
			,AR.working_situation  AS workingSituation
			,C.customer_name       AS customerName
			,B.branch_name         AS branchName
			,S.staff_name          AS staffName
			,AR.reception_date     AS receptionDate			
		FROM
			as_reception AS AR
		JOIN
			customer AS C
		ON
			C.customer_id = AR.customer_id
		JOIN
			branch AS B
		ON
			B.branch_code = AR.branch_code
		JOIN
			staff AS S
		ON
			S.staff_code = AR.staff_id2
		WHERE     AR.`work` = #{work}
		 	  OR  AR.working_situation = #{workingSituation}
		  	  OR  C.customer_name = #{customerName}
		 	  OR  B.branch_name = #{branchName}
		 	  OR  S.staff_name = #{staffName}
		 	  OR  AR.reception_code BETWEEN  #{fromDate}  AND  #{toDate}  ) AS CNT;
 	

	</select> -->
	
	<!--검색 -->
	<!-- <select id="AsExchangeSearchList" parameterType="String"  resultMap="AsExchangeResultMap">
	 	 SELECT 
			 AR.reception_code     
			,AR.`work`             
			,AR.working_situation  
			,C.customer_name       
			,B.branch_name        
			,S.staff_name          
			,AR.reception_date    		
		FROM
			as_reception AS AR
		JOIN
			customer AS C
		ON
			C.customer_id = AR.customer_id
		JOIN
			branch AS B
		ON
			B.branch_code = AR.branch_code
		JOIN
			staff AS S
		ON
			S.staff_code = AR.staff_id2
		WHERE     AR.`work` = #{work}
		 	  AND  AR.working_situation = #{workingSituation}
		  	  OR  C.customer_name = #{customerName}
		 	  OR  B.branch_name = #{branchName}
		 	  OR  S.staff_name = #{staffName}
		 	  OR  AR.reception_code BETWEEN  #{fromDate}  AND  #{toDate}
		      LIMIT ${startClmn}, ${endClmn};     	
	</select>
 -->




















</mapper>
  